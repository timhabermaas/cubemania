// Generated by CoffeeScript 1.10.0
jQuery(function() {
  if (!$("#backbone-container").length) {
    return;
  }

  (function() {
    var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
      extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
      hasProp = {}.hasOwnProperty;

    Cubemania.Views.TimerIndex = (function(superClass) {
      extend(TimerIndex, superClass);

      function TimerIndex() {
        this.refetchRecords = bind(this.refetchRecords, this);
        this.checkForNewRecord = bind(this.checkForNewRecord, this);
        return TimerIndex.__super__.constructor.apply(this, arguments);
      }

      TimerIndex.prototype.template = _.template($("#template-timer-index").html());

      TimerIndex.prototype.initialize = function(options) {
        this.records = options.records;
        this.statsView = new Cubemania.Views.Stats({
          singles: this.collection,
          records: this.records
        });
        this.timerView = new Cubemania.Views.Timer({
          collection: this.collection
        });
        if (Cubemania.currentUser.present()) {
          this.chartView = new Cubemania.Views.Chart({
            collection: this.collection
          });
        }
        this.singlesView = new Cubemania.Views.Singles({
          collection: this.collection
        });
        $(document).ajaxComplete(this.checkForNewRecord);
        return this.refetchRecordsIntervalId = setInterval(this.refetchRecords, 600000);
      };

      TimerIndex.prototype.render = function() {
        $(this.el).html(this.template());
        this.timerView.setElement(this.$("#timer")).render();
        this.statsView.setElement(this.$("#stats")).render();
        if ((this.chartView != null)) {
          this.chartView.setElement(this.$("#chart-container")).render();
        } else {
          this.$("#chart-container").html("<p class='suggestion'>You're currently not logged in!<br /> <a href='/login'>Login</a> or <a href='/register'>register</a> to save your times permanently. </p>");
        }
        this.singlesView.setElement(this.$("#singles")).render();
        return this;
      };

      TimerIndex.prototype.checkForNewRecord = function(e, request, options) {
        if (request.getResponseHeader("X-NewRecord")) {
          this.records.on("reset", this.newRecordsArrived, this);
          return this.records.fetch({
            data: $.param({
              user_id: Cubemania.currentUser.get("id")
            })
          });
        }
      };

      TimerIndex.prototype.refetchRecords = function() {
        this.records.setPuzzleId(Cubemania.currentPuzzle.getId());
        return this.records.fetch({
          data: {
            user_id: Cubemania.currentUser.get("id")
          }
        });
      };

      TimerIndex.prototype.newRecordsArrived = function(records) {
        var r;
        r = new Cubemania.Presenters.RecordsPresenter(records);
        Cubemania.flashView.slideDown(r.flashMessage(this.collection.lastSingle()));
        return this.records.off("reset", this.newRecordsArrived);
      };

      return TimerIndex;

    })(Backbone.View);

  }).call(this);
});
