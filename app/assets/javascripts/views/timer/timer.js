// Generated by CoffeeScript 1.10.0
jQuery(function() {
  if (!$("#backbone-container").length) {
    return;
  }

  (function() {
    var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
      extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
      hasProp = {}.hasOwnProperty;

    Cubemania.Views.Timer = (function(superClass) {
      extend(Timer, superClass);

      function Timer() {
        this.submitSingle = bind(this.submitSingle, this);
        this.keyDown = bind(this.keyDown, this);
        this.keyUp = bind(this.keyUp, this);
        this.updateDisplay = bind(this.updateDisplay, this);
        return Timer.__super__.constructor.apply(this, arguments);
      }

      Timer.prototype.template = _.template($("#template-timer-timer").html());

      Timer.prototype.events = {
        "click a.toggle": "toggleManual",
        "submit #new_single": "submitSingle",
        "touchstart .time-container": "keyDown",
        "touchend .time-container": "keyUp",
        "submit #add_comment": "addComment",
        "click a.add_comment": "toggleComment",
        "click input.inspection-toggle": "toggleInspection",
        "focus div.add_comment textarea": "disableTimer",
        "blur div.add_comment textarea": "enableTimer"
      };

      Timer.prototype.initialize = function() {
        this.timer = new Cubemania.TimerWithInspection(0);
        this.timer.on("stopped", this.displayAddCommentBubble, this);
        this.timer.on("stopped", this.createSingle, this);
        this.timer.on("started", this.hideStuff, this);
        this.timer.on("isAboutToStart", this.makeTimeGreen, this);
        this.timer.on("countdownStarted", this.hideStuff, this);
        this.timerEnabled = true;
        this.scramble = Cubemania.scrambler.scramble(Cubemania.currentPuzzle.getName());
        $(document).keydown(this.keyDown);
        $(document).keyup(this.keyUp);
        return setInterval(this.updateDisplay, 41);
      };

      Timer.prototype.updateDisplay = function() {
        if (this.timer.isCountdownRunning()) {
          return this.$(".time").html(Math.ceil(this.timer.currentTime() / 1000));
        } else {
          return this.$(".time").html(formatTime(this.timer.currentTime()));
        }
      };

      Timer.prototype.updateScramble = function() {
        this.scramble = Cubemania.scrambler.scramble(Cubemania.currentPuzzle.getName());
        return this.$(".scramble").html(formatScramble(this.scramble));
      };

      Timer.prototype.render = function() {
        $(this.el).html(this.template({
          scramble: this.scramble,
          timer: this.timer
        }));
        return this;
      };

      Timer.prototype.keyUp = function(event) {
        if ((event.type === "touchend" || event.keyCode === 32) && this.timerEnabled) {
          event.preventDefault();
          this.timer.wantToStart();
          return this.$(".time").removeClass("starting");
        }
      };

      Timer.prototype.keyDown = function(event) {
        if ((event.type === "touchstart" || event.keyCode === 32) && this.timerEnabled) {
          event.preventDefault();
          return this.timer.wantToStop();
        }
      };

      Timer.prototype.toggleManual = function(event) {
        var ct;
        event.preventDefault();
        this.$("#new_single").toggle();
        this.$(".time-container").toggle();
        this.timerEnabled = !this.timerEnabled;
        ct = event.currentTarget;
        this.$(ct).toggleText("Changed your mind?", "Set times manually");
        if (this.$(ct).text() === "Changed your mind?") {
          return this.$("#single_human_time").focus();
        } else {
          return this.$("#single_human_time").blur();
        }
      };

      Timer.prototype.toggleComment = function(event) {
        if (event != null) {
          event.preventDefault();
        }
        this.$("div.add_comment form").toggle();
        this.$("div.add_comment a").toggle();
        return this.$("div.add_comment form")[0].reset();
      };

      Timer.prototype.toggleInspection = function(event) {
        var inspection;
        inspection = this.$("input.inspection-toggle").prop("checked") ? 15 : 0;
        this.timer.reset(inspection);
        return this.render();
      };

      Timer.prototype.enableTimer = function() {
        return this.timerEnabled = true;
      };

      Timer.prototype.disableTimer = function() {
        return this.timerEnabled = false;
      };

      Timer.prototype.submitSingle = function(event) {
        event.preventDefault();
        this.collection.create({
          human_time: this.$("#single_human_time").val(),
          scramble: this.scramble
        });
        this.updateScramble();
        return this.$("form")[0].reset();
      };

      Timer.prototype.createSingle = function(time) {
        this.collection.create({
          time: this.timer.currentTime(),
          scramble: this.scramble
        });
        return this.updateScramble();
      };

      Timer.prototype.addComment = function(event) {
        var lastSingle;
        event.preventDefault();
        lastSingle = this.collection.models[this.collection.length - 1];
        lastSingle.set("comment", this.$("#add_comment [name='comment']").val());
        lastSingle.save();
        this.toggleComment();
        return this.hideAddCommentBubble();
      };

      Timer.prototype.makeTimeGreen = function() {
        return this.$(".time").addClass("starting");
      };

      Timer.prototype.displayAddCommentBubble = function() {
        return this.$("div.add_comment").slideDown();
      };

      Timer.prototype.hideAddCommentBubble = function() {
        this.$("div.add_comment").slideUp();
        this.$("div.add_comment form").hide();
        return this.$("div.add_comment a").show();
      };

      Timer.prototype.hideStuff = function() {
        this.hideAddCommentBubble();
        return Cubemania.flashView.slideUp();
      };

      return Timer;

    })(Backbone.View);

  }).call(this);
});
