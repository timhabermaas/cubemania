// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Cubemania.Models.Single = (function(superClass) {
    extend(Single, superClass);

    function Single() {
      return Single.__super__.constructor.apply(this, arguments);
    }

    Single.prototype.defaults = function() {
      return {
        "created_at": new Date().toISOString(),
        "updated_at": new Date().toISOString()
      };
    };

    Single.prototype.validate = function(attributes) {
      if ((attributes.time == null) || isNaN(attributes.time)) {
        return "time is not valid";
      }
    };

    Single.prototype.initialize = function(model, options) {
      if (model.human_time != null) {
        return this.setTimeFromHumanTime(model.human_time);
      }
    };

    Single.prototype.togglePlus2 = function() {
      if (this.plus2()) {
        this.set("penalty", null);
        return this.set("time", this.get("time") - 2000);
      } else {
        this.set("penalty", "plus2");
        return this.set("time", this.get("time") + 2000);
      }
    };

    Single.prototype.toggleDnf = function() {
      if (this.dnf()) {
        return this.set("penalty", null);
      } else if (this.plus2()) {
        this.set("penalty", "dnf");
        return this.set("time", this.get("time") - 2000);
      } else {
        return this.set("penalty", "dnf");
      }
    };

    Single.prototype.plus2 = function() {
      return this.get("penalty") === "plus2";
    };

    Single.prototype.dnf = function() {
      return this.get("penalty") === "dnf";
    };

    Single.prototype.setTimeFromHumanTime = function(human_time) {
      var hours, minutes, ref, seconds;
      ref = human_time.split(':').reverse(), seconds = ref[0], minutes = ref[1], hours = ref[2];
      hours = hours != null ? parseInt(hours) * 3600 : 0;
      minutes = minutes != null ? parseInt(minutes) * 60 : 0;
      return this.set("time", (hours + minutes) * 1000 + parseFloat(seconds) * 1000);
    };

    return Single;

  })(Backbone.Model);

}).call(this);
