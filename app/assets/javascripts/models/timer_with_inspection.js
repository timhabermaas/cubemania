// Generated by CoffeeScript 1.10.0
(function() {
  Cubemania.TimerWithInspection = (function() {
    function TimerWithInspection(inspection) {
      _.extend(this, Backbone.Events);
      this.reset(inspection);
    }

    TimerWithInspection.prototype.reset = function(inspection) {
      this.state = "reset";
      this.startedAt = new Date().getTime() - 10000;
      this.stoppedAt = this.startedAt;
      return this.inspection = inspection * 1000;
    };

    TimerWithInspection.prototype.wantToStart = function() {
      switch (this.state) {
        case "isAboutToStartCountdown":
          this.countdownStartedAt = new Date().getTime();
          return this.setState("countdownStarted");
        case "isAboutToStart":
          this.startedAt = new Date().getTime();
          return this.setState("started");
        case "stopped":
          return this.setState("reset");
      }
    };

    TimerWithInspection.prototype.wantToStop = function() {
      switch (this.state) {
        case "reset":
          if (this.stoppedForLongerThan(2)) {
            if (this.hasInspection()) {
              return this.setState("isAboutToStartCountdown");
            } else {
              return this.setState("isAboutToStart");
            }
          }
          break;
        case "countdownStarted":
          return this.setState("isAboutToStart");
        case "started":
          this.stoppedAt = new Date().getTime();
          return this.setState("stopped");
      }
    };

    TimerWithInspection.prototype.isReset = function() {
      return this.state === "reset";
    };

    TimerWithInspection.prototype.isRunning = function() {
      return this.state === "started";
    };

    TimerWithInspection.prototype.isCountdownRunning = function() {
      return this.state === "countdownStarted";
    };

    TimerWithInspection.prototype.penalty = function() {
      return this.inspection - (this.startedAt - this.countdownStartedAt);
    };

    TimerWithInspection.prototype.stoppedForLongerThan = function(time) {
      return (new Date().getTime() - this.stoppedAt) > time * 1000;
    };

    TimerWithInspection.prototype.setState = function(state) {
      this.state = state;
      return this.trigger(state, this);
    };

    TimerWithInspection.prototype.hasInspection = function() {
      return this.inspection > 0;
    };

    TimerWithInspection.prototype.currentTime = function() {
      if (this.isCountdownRunning()) {
        return this.inspection - (new Date().getTime() - this.countdownStartedAt);
      } else if (this.isRunning()) {
        return new Date().getTime() - this.startedAt;
      } else {
        return this.stoppedAt - this.startedAt;
      }
    };

    return TimerWithInspection;

  })();

}).call(this);
