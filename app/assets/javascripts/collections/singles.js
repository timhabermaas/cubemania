// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Cubemania.Collections.Singles = (function(superClass) {
    extend(Singles, superClass);

    function Singles() {
      this.today = bind(this.today, this);
      this.recent = bind(this.recent, this);
      return Singles.__super__.constructor.apply(this, arguments);
    }

    Singles.prototype.model = Cubemania.Models.Single;

    Singles.prototype.url = function() {
      return "/api/puzzles/" + this.puzzleId + "/singles";
    };

    Singles.prototype.comparator = function(single) {
      return single.get("created_at");
    };

    Singles.prototype.initialize = function(models, options) {
      this.setPuzzleId(options.puzzleId);
      if (options.useLocalStorage) {
        return this.localStorage = new Backbone.LocalStorage("singles-" + options.puzzleId);
      }
    };

    Singles.prototype.setPuzzleId = function(puzzleId) {
      this.puzzleId = puzzleId;
      if (this.localStorage != null) {
        return this.localStorage = new Backbone.LocalStorage("singles-" + puzzleId);
      }
    };

    Singles.prototype.currentAverage = function(size) {
      var dnfs, lastSingles, solvedSingles, sum, times;
      lastSingles = this.recent(size);
      dnfs = _.filter(lastSingles, function(s) {
        return s.dnf();
      });
      if (dnfs.length > 1 || lastSingles.length < size) {
        return null;
      }
      solvedSingles = _.reject(lastSingles, function(s) {
        return s.dnf();
      });
      times = _.map(solvedSingles, function(s) {
        return s.get("time");
      });
      sum = _.reduce(times, (function(memo, t) {
        return memo + t;
      }), 0);
      if (dnfs.length === 0) {
        return (sum - _.min(times) - _.max(times)) / (size - 2);
      } else {
        return (sum - _.min(times)) / (size - 2);
      }
    };

    Singles.prototype.currentMean = function(size) {
      var dnfs, lastSingles, sum, times;
      lastSingles = this.recent(size);
      dnfs = _.filter(lastSingles, function(s) {
        return s.dnf();
      });
      if (dnfs.length > 0 || lastSingles.length < size) {
        return null;
      }
      times = _.map(lastSingles, function(s) {
        return s.get("time");
      });
      sum = _.reduce(times, (function(memo, t) {
        return memo + t;
      }), 0);
      return sum / size;
    };

    Singles.prototype.recent = function(amount) {
      return this.models.slice(-amount);
    };

    Singles.prototype.today = function() {
      var today;
      today = new Date();
      today.setDate(today.getDate() - 1);
      return _.filter(this.models, function(s) {
        return new Date(s.get("created_at")) > today;
      });
    };

    Singles.prototype.best = function() {
      return _.min(this.models, function(s) {
        return s.get("time");
      });
    };

    Singles.prototype.worst = function() {
      return _.max(this.models, function(s) {
        return s.get("time");
      });
    };

    Singles.prototype.lastSingle = function() {
      return this.models.slice(-1)[0];
    };

    return Singles;

  })(Backbone.Collection);

}).call(this);
