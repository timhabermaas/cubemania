// Generated by CoffeeScript 1.10.0
(function() {
  var replaceNewlinesWithBr, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.formatTime = function(time) {
    var minutes, s, seconds;
    if (time == null) {
      return "-:--.--";
    }
    seconds = Math.round(time / 10) / 100;
    if (seconds < 60) {
      return (seconds.toFixed(2)) + "s";
    } else {
      minutes = Math.floor(seconds / 60);
      seconds = seconds - minutes * 60;
      s = seconds < 10 ? "0" : "";
      return minutes + ":" + s + (seconds.toFixed(2)) + "min";
    }
  };

  root.formatDate = function(date) {
    var d;
    d = new Date(date);
    return d.format("mmmm dd, yyyy");
  };

  root.formatDateTime = function(date) {
    var d;
    d = new Date(date);
    return d.format("mmmm dd, yyyy 'at' H:MM tt");
  };

  replaceNewlinesWithBr = function(text) {
    if (text != null) {
      return text.replace(/\n/g, "<br />");
    }
  };

  root.formatScramble = function(text) {
    return replaceNewlinesWithBr(text);
  };

  root.formatComment = function(text) {
    return replaceNewlinesWithBr(text);
  };

  root.average = function(singles, size) {
    var dnfs, single, solvedSingles, times;
    singles = singles.slice(0, size);
    dnfs = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = singles.length; i < len; i++) {
        single = singles[i];
        if ($(single).hasClass("dnf")) {
          results.push(single);
        }
      }
      return results;
    })();
    if (dnfs.length > 1 || singles.length < size) {
      return null;
    }
    solvedSingles = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = singles.length; i < len; i++) {
        single = singles[i];
        if (!$(single).hasClass("dnf")) {
          results.push(single);
        }
      }
      return results;
    })();
    times = rawTimes(solvedSingles);
    if (dnfs.length === 1) {
      return (Array.sum(times) - Array.min(times)) / (times.length - 1);
    } else {
      return (Array.sum(times) - Array.min(times) - Array.max(times)) / (times.length - 2);
    }
  };

  root.rawTimes = function(singles) {
    var i, len, results, single;
    results = [];
    for (i = 0, len = singles.length; i < len; i++) {
      single = singles[i];
      results.push(parseInt($(single).data("time")));
    }
    return results;
  };

  root.worst = function(singles) {
    var dnfSingles, index, max, single, times;
    dnfSingles = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = singles.length; i < len; i++) {
        single = singles[i];
        if ($(single).hasClass("dnf")) {
          results.push(single);
        }
      }
      return results;
    })();
    if (dnfSingles.length > 0) {
      return $(dnfSingles[dnfSingles.length - 1]);
    } else {
      times = rawTimes(singles);
      max = Array.max(times);
      index = times.indexOf(max);
      return $(singles[index]);
    }
  };

  root.best = function(singles) {
    var index, min, single, solvedSingles, times;
    solvedSingles = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = singles.length; i < len; i++) {
        single = singles[i];
        if (!$(single).hasClass("dnf")) {
          results.push(single);
        }
      }
      return results;
    })();
    if (solvedSingles.length === 0) {
      return $(null);
    } else {
      times = rawTimes(solvedSingles);
      min = Array.min(times);
      index = times.indexOf(min);
      return $(solvedSingles[index]);
    }
  };

}).call(this);
