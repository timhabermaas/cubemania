version: "3.7"
services:
  db:
    image: postgres:13.5-alpine3.15
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?psql password missing}
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: timhabermaas/cubemania_frontend
  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: timhabermaas/cubemania_nginx
    depends_on:
      - api
      - web
      - frontend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: timhabermaas/cubemania_api
    environment:
      RUST_LOG: info
      RUST_BACKTRACE: 1
      HMAC_SECRET: ${HMAC_SECRET}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db/cubemania_production
    depends_on:
      - db
  web:
    build: .
    image: timhabermaas/cubemania_rails
    command: bundle exec unicorn -p 3000 -c ./config/unicorn.rb
    volumes:
      - .:/cubemania
    depends_on:
      - db
      - cache
    environment:
      RAILS_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db/cubemania_production
      HMAC_SECRET: ${HMAC_SECRET}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      NEW_RELIC_ID: ${NEW_RELIC_ID}
      NEW_RELIC_APP_NAME: ${NEW_RELIC_APP_NAME-do}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      SECRET_TOKEN: ${SECRET_TOKEN}

  cache:
    image: memcached:alpine
    command: memcached -m 64

  backup:
    build:
      context: backup
      dockerfile: Dockerfile
    image: timhabermaas/cubemania_backup
    links:
      - db
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

volumes:
  postgres-volume:
